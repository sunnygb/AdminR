<%@ Template Language="C#" TargetLanguage="Text" Debug="True" OutputType="None"  %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>

<%@ Assembly Name="Mono.Cecil" Path=".\Common" %>
<%@ Assembly Name="ICSharpCode.NRefactory" Path=".\Common" %>
<%@ Assembly Name="ICSharpCode.NRefactory.CSharp" Path=".\Common" %>

<%@ Assembly Src="Internal\Model.cs" %>
<%@ Assembly Src="Internal\Extensions.cs" %>
<%@ Assembly Src="Internal\Generator.cs" %>
<%@ Assembly Src="Internal\Parser.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="SourceDatabase"
             Type="SchemaExplorer.DatabaseSchema"
             Category="1.Database"
             OnChanged="OnSourceDatabaseChanged"
             Description="The source database." %>

<%@ Property Name="ContextNamespace"
             Type="System.String"
             Category="2.Class"
             OnChanged="OnContextNamespaceChanged"
             Description="The namespace to use for the data context class files."%>
<%@ Property Name="EntityNamespace"
             Type="System.String"
             Category="2.Class"
             Description="The namespace to use for the entity class files."%>
<%@ Property Name="MappingNamespace"
             Type="System.String"
             Category="2.Class"
             Description="The namespace to use for the mapping class files."%>

<%@ Property Name="ContextDirectory"
             Category="3.Output"
             Type="System.String"
             Default=".\"
             Optional="True"
             Description="The folder to save the generated context files."
             Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="EntityDirectory"
             Category="3.Output"
             Type="System.String"
             Default=".\Entities"
             Optional="True"
             Description="The folder to save the generated entity files."
             Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="MappingDirectory"
             Category="3.Output"
             Type="System.String"
             Default=".\Mapping"
             Optional="True"
             Description="The folder to save the generated mapping files."
             Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>

<%@ Property Name="TableNaming"
             Type="SchemaMapper.TableNaming"
             Category="4.Hints"
             Default="Singular"
             Description="Provide generator a hint as to how the tables are named." %>
<%@ Property Name="EntityNaming"
             Type="SchemaMapper.EntityNaming"
             Category="4.Hints"
             Default="Singular"
             Description="Tell generator how the entities are to be named." %>
<%@ Property Name="RelationshipNaming"
             Type="SchemaMapper.RelationshipNaming"
             Category="4.Hints"
             Default="Plural"
             Description="Tell generator how the relationships are to be named." %>
<%@ Property Name="ContextNaming"
             Type="SchemaMapper.ContextNaming"
             Category="4.Hints"
             Default="Plural"
             Description="Tell generator how the context properties are to be named." %>

<%@ Property Name="IgnoreList"
             Type="CodeSmith.CustomProperties.StringCollection"
             Category="5.Customization"
             Default="sysdiagrams$"
             Optional="True"
             Description="List of regular expressions to ignore tables, views and commands when generating mapping." %>
<%@ Property Name="InclusionMode"
             Type="Boolean"
             Category="5.Customization"
             Default="False"
             Optional="True"
             Description="Change the IgnoreList to be a list of table to include instead of ignore." %>
<%@ Property Name="CleanExpressions"
             Type="CodeSmith.CustomProperties.StringCollection"
             Category="5.Customization"
             Default="^(sp|tbl|udf|vw)_"
             Optional="True"
             Description="List of regular expressions to clean table, view and column names." %>
<%@ Property Name="InterfaceMode"
             Type="Boolean"
             Category="5.Customization"
             Default="False"
             Optional="True"
             Description="Use interfaces for DbContext." %>


<%@ Property Name="IncludeQuery"
             Type="Boolean"
             Category="6.Query"
             Default="False"
             Optional="True"
             Description="Include query extensions." %>
<%@ Property Name="QueryNamespace"
             Type="System.String"
             Category="6.Query" 
             Optional="True"
             Description="The namespace to use for the query extension files."%>
<%@ Property Name="QueryDirectory"
             Category="6.Query"
             Type="System.String"
             Default=".\Queries"
             Optional="True"
             Description="The folder to save the generated query files."
             Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="MethodPrefix"
             Category="6.Query"
             Type="System.String" 
             Default="By" 
             Optional="True"
             Description="The prefix of query method names." %>
<%@ Property Name="UniqueMethodPrefix"
             Category="6.Query"
             Type="System.String" 
             Default="GetBy" 
             Optional="True"
             Description="The prefix of query method names." %>
<%@ Property Name="MethodKeySuffix"
             Category="6.Query"
             Type="System.String"
             Default="Key"
             Optional="False"
             Description="The suffix of the primary key query method names." %>

<%@ Property Name="IncludeMock"
             Type="Boolean"
             Category="7.Mock"
             Default="False"
             Optional="True"
             Description="Include generation of mocked DbContext and DbSet files." %>
<%@ Property Name="MockNamespace"
             Type="System.String"
             Category="7.Mock"
             Optional="True"
             Description="The namespace to use for the mock files."%>
<%@ Property Name="MockDirectory"
             Category="7.Mock"
             Type="System.String"
             Default=".\Mocks"
             Optional="True"
             Description="The folder to save the generated mock files."
             Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%@ Property Name="Internalize"
             Type="Boolean"
             Category="7.Mock"
             Default="True"
             Optional="True"
             Description="Mark mock files as internal." %>



<%@ Register Name="EntityGeneratedClass"
             Template="Internal\Entity.Generated.cst"
             MergeProperties="False" %>
<%@ Register Name="EntityEditableClass"
             Template="Internal\Entity.Editable.cst"
             MergeProperties="False" %>
 <%@ Register Name="EntityWrapperClass"
             Template="Internal\Entity.Wrapper.cst"
             MergeProperties="False" %>
 <%@ Register Name="EntityRepositoryClass"
             Template="Internal\Entity.Repository.cst"
             MergeProperties="False" %>
 <%@ Register Name="EntityInterfaceClass"
             Template="Internal\Entity.Interface.cst"
             MergeProperties="False" %>
             


Generating Entities ...
<% Generate(); %>

<script runat="template">
    public void Generate()
    {
        
        Stopwatch watch = Stopwatch.StartNew();
        string outputDirectory = Path.GetFullPath(ContextDirectory);

        if (!Directory.Exists(outputDirectory))
            Directory.CreateDirectory(outputDirectory);

        if (SourceDatabase != null)
        {
            this.Progress.MaximumValue = (SourceDatabase.Tables.Count * 3) + 1;
            this.Progress.Step = 1;
        }

        Generator generator = new Generator();
        generator.Settings.TableNaming = TableNaming;
        generator.Settings.EntityNaming = EntityNaming;
        generator.Settings.RelationshipNaming = RelationshipNaming;
        generator.Settings.ContextNaming = ContextNaming;

        foreach(string s in IgnoreList)
          if (!string.IsNullOrEmpty(s))
            generator.Settings.IgnoreExpressions.Add(s);

        foreach(string s in CleanExpressions)
          if (!string.IsNullOrEmpty(s))
            generator.Settings.CleanExpressions.Add(s);

        generator.SchemaItemProcessed += OnSchemaItemProcessed;
        
        // generate from database
        EntityContext context = generator.Generate(SourceDatabase);
        
        // update model from source files
        Synchronizer.UpdateFromSource(context, ContextDirectory, MappingDirectory);
        

        CreateEntityClasses(context);

    }


    public void CreateEntityClasses(EntityContext entityContext)
    {
        
        EntityGeneratedClass entityClass = this.Create<EntityGeneratedClass>();
        EntityWrapperClass wrapperClass = this.Create<EntityWrapperClass>();
        EntityRepositoryClass repositoryClass = this.Create<EntityRepositoryClass>();
        EntityInterfaceClass interfaceClass = this.Create<EntityInterfaceClass>();
        
        
        
        this.CopyPropertiesTo(entityClass);
        this.CopyPropertiesTo(wrapperClass);
        this.CopyPropertiesTo(repositoryClass);
        this.CopyPropertiesTo(interfaceClass);
        

        foreach(Entity entity in entityContext.Entities)
        {
            Stopwatch watch = Stopwatch.StartNew();

             Debug.WriteLine(string.Format(
                "Creating Entity Class '{0}' ...",
                entity.ClassName));

            string rootDirectory = Path.GetFullPath(EntityDirectory);
            CreateEntity(entityClass, wrapperClass,repositoryClass,interfaceClass, entity, rootDirectory,entityContext);

            Debug.WriteLine(string.Format(
                "Created Entity Class '{0}' in {1} ms.",
                entity.ClassName,
                watch.Elapsed.TotalMilliseconds.ToString()));
            
            this.Progress.PerformStep();
        }
    }

    public void CreateEntity(EntityGeneratedClass entityClass, EntityWrapperClass wrapperClass,EntityRepositoryClass repositoryClass,EntityInterfaceClass interfaceClass, Entity entity, string rootDirectory,EntityContext et)
    {
        string className = entity.ClassName;
        
        string wrapperFile = className + "Wrapper.cs";
        wrapperFile = Path.Combine(rootDirectory+"/Wrapper", wrapperFile);
        Response.WriteLine(wrapperFile);
        wrapperClass.Entity = entity;
        Response.WriteLine(wrapperFile);
        wrapperClass.RenderToFile(wrapperFile, true);
        

        string entityFile = className + ".cs";
        entityFile = Path.Combine(rootDirectory+"/Entity", entityFile);
        entityClass.Entity = entity;
        Response.WriteLine(entityFile);
        entityClass.RenderToFile(entityFile, true);
        
        
        string repositoryFile = className + "Repository.cs";
        repositoryFile = Path.Combine(rootDirectory+"/Repository", repositoryFile);
        Response.WriteLine(repositoryClass);
        repositoryClass.Entity = entity;
        repositoryClass.EntityContext=et;
        Response.WriteLine(repositoryFile);
        repositoryClass.RenderToFile(repositoryFile, true);
        
        
        string interfaceFile = className + "Interface.cs";
        interfaceFile = Path.Combine(rootDirectory+"/Interface", interfaceFile);
        Response.WriteLine(interfaceClass);
        interfaceClass.Entity = entity;
        Response.WriteLine(interfaceFile);
        interfaceClass.RenderToFile(interfaceFile, true);
        
        
        
    }

    
    private void OnSchemaItemProcessed(object sender, SchemaItemProcessedEventArgs e)
    {
        this.Progress.PerformStep();
        Response.WriteLine(e.Name);
    }

    private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
        if (SourceDatabase == null)
            return;

        string name = StringUtil.ToPascalCase(SourceDatabase.Database.Name);

        if (string.IsNullOrEmpty(ContextNamespace))
            ContextNamespace = name + ".Data";

    }

    private void OnContextNamespaceChanged(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(ContextNamespace))
            return;

        if (string.IsNullOrEmpty(EntityNamespace))
            EntityNamespace = ContextNamespace + ".Entities";

        if (string.IsNullOrEmpty(MappingNamespace))
            MappingNamespace = ContextNamespace + ".Mapping";
        
        if (string.IsNullOrEmpty(QueryNamespace))
            QueryNamespace = ContextNamespace + ".Queries";

        if (string.IsNullOrEmpty(MockNamespace))
            MockNamespace = ContextNamespace + ".Mocks";

    }

</script>