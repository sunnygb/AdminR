<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Assembly Src="Model.cs" %>
<%@ Assembly Src="Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity"
             Type="SchemaMapper.Entity"  %>
<%@ Property Name="EntityContext"
             Type="SchemaMapper.EntityContext"  %>

<%@ Property Name="EntityNamespace"
             Type="System.String"  %>
using ServiceStack.OrmLite;
using System;
using System.Data;
using System.Configuration;
using System.Collections.Generic;
using <%=EntityNamespace%>.Services;
using System.Text;
using System.Transactions;
using System.Linq;

namespace <%= EntityNamespace%>.Repository
{    
    public class <%= Entity.ClassName%>Repository : I<%= Entity.ContextName%>Repository 
    { 
      
      
      private IDbConnection conn = GetConnection();

      public <%=Entity.ClassName%> Add(<%=Entity.ClassName%> <%=Entity.ClassName.ToLower()%>)
       {
          this.conn.Insert(<%=Entity.ClassName.ToLower()%>);
          <%=Entity.ClassName.ToLower()%>.<%= GetPrimeryKey().PropertyName%> =this.conn.LastInsertId();
          return <%=Entity.ClassName.ToLower()%>;
       
       }
       
      public List<<%=Entity.ClassName%>> GetAll()
       {
         return this.conn.Select<<%=Entity.ClassName %>>();
       
       }
       
      public <%=Entity.ClassName%> Find(long id)
       {
         return this.conn.SingleById<<%=Entity.ClassName%>>(id);
       
       }
       
      public <%=Entity.ClassName%> Update(<%=Entity.ClassName%> <%=Entity.ClassName.ToLower()%>)
       {
          var result=this.conn.Update<<%=Entity.ClassName%>>(<%=Entity.ClassName.ToLower()%>);
          return <%=Entity.ClassName.ToLower()%>;
       
       }
       
      public void Remove(long id)
       {
          this.conn.DeleteById<<%=Entity.ClassName%>>(id);
       
       }
       
      public <%=Entity.ClassName%> GetAllWithChildren(long id)
       {
          throw new NotImplementedException();
       
       }
       
      public void Save(<%=Entity.ClassName%> <%=Entity.ClassName.ToLower()%>)
       {
          
          using(var txScope= new TransactionScope())
            {
                if(<%=Entity.ClassName.ToLower()%>.IsNew)
                {
                    this.Add(<%=Entity.ClassName.ToLower()%>);
                }
                else
                {
                    this.Update(<%=Entity.ClassName.ToLower()%>);
                }
                
                
                foreach(var selected in student.SelectedStudents.Where(s => !s.IsDeleted))
                {
                    selected.StudentId= student.StudentId;
                    this.conn.Save(student);
                }
                foreach(var selected in student.SelectedStudents.Where(s => s.IsDeleted))
                {
                    this.conn.DeleteById<SelectedStudent>(selected.SelectedStudentId);

                }
                    txScope.Complete();
            }
            return <%=Entity.ClassName.ToLower()%>;
       
       }
       private static IDbConnection GetConnection()
       {
          string connectionString =Environment.CurrentDirectory + "\\SystemDB.db";
          var dbFactory = new OrmLiteConnectionFactory(connectionString, SqliteDialect.Provider);
          var db = dbFactory.OpenDbConnection();
          return db;

       
       }
   
    }
}
<script runat="template">
       public Property GetPrimeryKey()
       {
           foreach(var p in Entity.Properties)
           {
               if((bool)p.IsPrimaryKey && (p.SystemType.IsPrimitive))
               {
                   return p;
                   break;
               }
           }
           return null;
       }

</script>