<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Assembly Src="Model.cs" %>
<%@ Assembly Src="Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity"
             Type="SchemaMapper.Entity"  %>
<%@ Property Name="EntityContext"
             Type="SchemaMapper.EntityContext"  %>

<%@ Property Name="EntityNamespace"
             Type="System.String"  %>
using ServiceStack.OrmLite;
using System;
using System.Data;
using System.Configuration;
using System.Collections.Generic;
using <%=EntityNamespace%>.Services;
using System.Text;
using System.Transactions;
using System.Linq;

namespace <%= EntityNamespace%>.Repository
{    
    public class <%= Entity.ClassName%>Repository : I<%= Entity.ContextName%>Repository 
    { 
      
      
      private IDbConnection conn = GetConnection();

      public <%=Entity.ClassName%> Add(<%=Entity.ClassName%> <%=Entity.ClassName.ToLower()%>)
       {
          this.conn.Insert(<%=Entity.ClassName.ToLower()%>);
          <%=Entity.ClassName.ToLower()%>.<%= GetPrimeryKey().PropertyName%> =this.conn.LastInsertId();
          return <%=Entity.ClassName.ToLower()%>;
       
       }
       
      public List<<%=Entity.ClassName%>> GetAll()
       {
         return this.conn.Select<<%=Entity.ClassName %>>();
       
       }
       
      public <%=Entity.ClassName%> Find(long id)
       {
         return this.conn.SingleById<<%=Entity.ClassName%>>(id);
       
       }
       
      public <%=Entity.ClassName%> Update(<%=Entity.ClassName%> <%=Entity.ClassName.ToLower()%>)
       {
          var result=this.conn.Update<<%=Entity.ClassName%>>(<%=Entity.ClassName.ToLower()%>);
          return <%=Entity.ClassName.ToLower()%>;
       
       }
       
      public void Remove(long id)
       {
          this.conn.DeleteById<<%=Entity.ClassName%>>(id);
       
       }
       
      public <%=Entity.ClassName%> GetAllWithChildren(long id)
       {
          var <%=Entity.ClassName.ToLower()%> = this.conn.SingleById<<%=Entity.ClassName%>>(id);
          
          
          
          <% foreach(var r in Entity.Relationships) { %>
                 <% if(r.ThisCardinality == Cardinality.Many) { %>
        
                 //One To Many
           var <%= r.ThisPropertyName.ToSafeName().ToLower() %> = this.conn.Select<<%= r.OtherEntity.ToSafeName() %>>().Where(a => a.<%= GetForeignPropertyO(r.OtherEntity).PropertyName%> == id).ToList();
           if (<%=Entity.ClassName.ToLower()%> != null && <%= r.ThisPropertyName.ToSafeName().ToLower()%> != null)
           {
             <%=Entity.ClassName.ToLower()%>.<%= r.ThisPropertyName.ToSafeName()%>.AddRange(<%= r.ThisPropertyName.ToSafeName().ToLower() %>);
           }      
                  
                  
                  
         <% } else { %>
   
                 // One To One 
           var <%= r.ThisPropertyName.ToSafeName().ToLower()%> = this.conn.Select<<%= r.ThisPropertyName.ToSafeName()%>>().Where(a => a.<%= GetForeignPropertyO(r.OtherEntity).PropertyName%> == id).SingleOrDefault();
           if (<%=Entity.ClassName.ToLower()%> != null && <%= r.ThisPropertyName.ToSafeName().ToLower()%> != null)
           {
             <%=Entity.ClassName.ToLower()%>.<%= r.ThisPropertyName.ToSafeName()%> = <%= r.ThisPropertyName.ToSafeName().ToLower()%>;
           }
         
              <% } %> 
          <% } %>
  
         return <%=Entity.ClassName.ToLower()%>;
         }
       
       
      public <%=Entity.ClassName%> Save(<%=Entity.ClassName%> <%=Entity.ClassName.ToLower()%>)
       {
          using(var txScope= new TransactionScope())
            {
                if(<%=Entity.ClassName.ToLower()%>.IsNew)
                {
                    this.Add(<%=Entity.ClassName.ToLower()%>);
                }
                else
                {
                    this.Update(<%=Entity.ClassName.ToLower()%>);
                }
                
                
                 <% foreach(var r in Entity.Relationships) { %>
                 <% if(r.ThisCardinality == Cardinality.Many) { %>
        
                 //One To Many
                  foreach(var <%= r.OtherEntity.ToSafeName().ToLower()%> in <%=Entity.ClassName.ToLower()%>.<%= r.ThisPropertyName.ToSafeName() %>.Where(s => !s.IsDeleted))
                  { 
                  
                    <%= r.OtherEntity.ToSafeName().ToLower()%>.<%= GetForeignPropertyM(r.OtherEntity).PropertyName %> =<%= this.Entity.ClassName.ToLower()%>.<%= GetPrimeryKey().PropertyName%>;
                    this.conn.Save(<%= r.OtherEntity.ToSafeName().ToLower()%>);
                  }
                  foreach(var <%= r.OtherEntity.ToSafeName().ToLower()%> in <%=Entity.ClassName.ToLower()%>.<%= r.ThisPropertyName.ToSafeName() %>.Where(s => s.IsDeleted))
                  { 
                  
                    this.conn.DeleteById<<%= r.OtherEntity.ToSafeName()%>>(<%= r.OtherEntity.ToSafeName().ToLower()%>.<%= GetForeignPropertyO(r.OtherEntity).PropertyName%>);
                  }
                    <% } else { %>
                    
                    <% if(r.ThisPropertyName.ToSafeName().ToString().Equals("Qualification") ){%>
                    <% Debugger.Launch(); %>
                    <%} %>
                    
                 // One To One 
                 if(<%=Entity.ClassName.ToLower()%>.<%= r.ThisPropertyName.ToSafeName()%> !=null)
                 {
                    var <%= r.ThisPropertyName.ToSafeName().ToLower()%> = <%=Entity.ClassName.ToLower()%>.<%= r.ThisPropertyName.ToSafeName()%>;
                    <%= r.ThisPropertyName.ToSafeName().ToLower()%>.<%= GetForeignPropertyO(r.OtherEntity).PropertyName%> = <%=Entity.ClassName.ToLower()%>.<%= GetPrimeryKey().PropertyName%>;
                    this.conn.Save(<%= r.ThisPropertyName.ToSafeName().ToLower()%>);
                 }
                          <% } %> 
                       <% } %>
                 
                   
                    txScope.Complete();
            }
            return <%=Entity.ClassName.ToLower()%>;
       
       }
          
       
       
       private static IDbConnection GetConnection()
       {
          string connectionString =Environment.CurrentDirectory + "\\SystemDB.db";
          var dbFactory = new OrmLiteConnectionFactory(connectionString, SqliteDialect.Provider);
          var db = dbFactory.OpenDbConnection();
          return db;

       
       }
   
    }
}
<script runat="template">

public Property GetPrimeryKey()
{
           foreach(var p in Entity.Properties)
           {
               if((bool)p.IsPrimaryKey && (p.SystemType.IsPrimitive))
               {
                   return p;
                   break;
               }
           }
           return null;
 }
       
       
 public Property GetForeignPropertyM(string OtherEntityName)
{
           foreach(var entity in this.EntityContext.Entities)
           {
               if(OtherEntityName==entity.ClassName)
               {
                   foreach(var property in Entity.Properties)
                   {
                       if(property.PropertyName==this.GetPrimeryKey().PropertyName)
                       {
                           return property;
                           
                       }
                   }
               }
           }
           
           
   return null;          
}

public Property GetForeignPropertyO(string OtherEntityName)
{
           foreach(var entity in this.EntityContext.Entities)
           {
               if(OtherEntityName==entity.ClassName)
               {
                   foreach(var property in entity.Properties)
                   {
                    
                       if((bool)property.IsPrimaryKey)
                       {
                           return property;
                           break;
                       }
                   }
               }
           }
           
           
   return null;          
}

</script>